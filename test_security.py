#!/usr/bin/env python
"""
Script de test pour v√©rifier la s√©curit√© du portail √©tudiant
"""

import os
import sys
import django
from django.test import Client
from django.urls import reverse

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'ysem.settings')
django.setup()

from students.models import Student
from accounts.models import BaseUser


def test_student_portal_security():
    """Test de s√©curit√© du portail √©tudiant"""
    
    print("=== Test de S√©curit√© du Portail √âtudiant ===\n")
    
    # 1. Cr√©er un √©tudiant de test avec mot de passe
    print("1. Pr√©paration des donn√©es de test...")
    try:
        # Supprimer l'√©tudiant s'il existe d√©j√†
        Student.objects.filter(matricule='SECURITY_TEST').delete()
        
        student = Student.objects.create(
            matricule='SECURITY_TEST',
            firstname='Test',
            lastname='Security',
            gender='M',
            status='approved',
            email='test.security@test.com'
        )
        
        # G√©n√©rer un mot de passe
        password = student.generate_external_password()
        print(f"   ‚úì √âtudiant cr√©√© avec mot de passe: {password}")
    except Exception as e:
        print(f"   ‚úó Erreur lors de la cr√©ation de l'√©tudiant: {e}")
        return False
    
    # 2. Tester l'acc√®s aux URLs d'administration sans authentification
    print("\n2. Test d'acc√®s aux URLs d'administration sans authentification...")
    client = Client()
    
    admin_urls = [
        '/admin/',
        '/scholar',
        '/etudiants/',
        '/documents/',
        '/statistiques/',
        '/parametres/',
    ]
    
    for url in admin_urls:
        try:
            response = client.get(url)
            # Ces URLs devraient rediriger vers la connexion (302) ou √™tre interdites (403)
            if response.status_code in [302, 403]:
                print(f"   ‚úì {url} : Acc√®s correctement bloqu√© (code: {response.status_code})")
            else:
                print(f"   ‚ö† {url} : Acc√®s non bloqu√© (code: {response.status_code})")
        except Exception as e:
            print(f"   ‚úó Erreur lors du test de {url}: {e}")
    
    # 3. Connecter l'√©tudiant au portail
    print("\n3. Connexion de l'√©tudiant au portail...")
    try:
        response = client.post(reverse('student_portal:login'), {
            'matricule': 'SECURITY_TEST',
            'password': password
        })
        
        if client.session.get('student_authenticated'):
            print("   ‚úì √âtudiant connect√© au portail")
        else:
            print("   ‚úó √âchec de la connexion de l'√©tudiant")
            return False
    except Exception as e:
        print(f"   ‚úó Erreur lors de la connexion: {e}")
        return False
    
    # 4. Tester l'acc√®s aux URLs d'administration avec un √©tudiant connect√©
    print("\n4. Test d'acc√®s aux URLs d'administration avec √©tudiant connect√©...")
    
    for url in admin_urls:
        try:
            response = client.get(url)
            # L'√©tudiant devrait √™tre redirig√© vers son dashboard
            if response.status_code == 302:
                # V√©rifier que la redirection va vers le dashboard √©tudiant
                if 'portail-etudiant/tableau-de-bord' in response.url:
                    print(f"   ‚úì {url} : Acc√®s bloqu√©, redirection vers dashboard √©tudiant")
                else:
                    print(f"   ‚ö† {url} : Redirection vers {response.url} (attendu: dashboard √©tudiant)")
            else:
                print(f"   ‚úó {url} : Acc√®s non bloqu√© (code: {response.status_code})")
        except Exception as e:
            print(f"   ‚úó Erreur lors du test de {url}: {e}")
    
    # 5. Tester l'acc√®s √† des vues sp√©cifiques sensibles
    print("\n5. Test d'acc√®s aux vues sensibles...")
    
    sensitive_urls = [
        f'/etudiant/{student.matricule}/',
        f'/etudiant/{student.matricule}/modifier/',
        f'/etudiant/{student.matricule}/generer-mot-de-passe/',
        '/document/nouveau/',
        '/inscription/TEST001/',
    ]
    
    for url in sensitive_urls:
        try:
            response = client.get(url)
            if response.status_code == 302:
                print(f"   ‚úì {url} : Acc√®s bloqu√© (redirection)")
            elif response.status_code == 403:
                print(f"   ‚úì {url} : Acc√®s bloqu√© (403 Forbidden)")
            else:
                print(f"   ‚úó {url} : Acc√®s non bloqu√© (code: {response.status_code})")
        except Exception as e:
            print(f"   ‚ö† {url} : Erreur lors du test: {e}")
    
    # 6. V√©rifier que l'√©tudiant peut toujours acc√©der √† son portail
    print("\n6. V√©rification de l'acc√®s au portail √©tudiant...")
    
    student_urls = [
        reverse('student_portal:dashboard'),
        reverse('student_portal:documents'),
    ]
    
    for url in student_urls:
        try:
            response = client.get(url)
            if response.status_code == 200:
                print(f"   ‚úì {url} : Acc√®s autoris√©")
            else:
                print(f"   ‚úó {url} : Acc√®s bloqu√© (code: {response.status_code})")
        except Exception as e:
            print(f"   ‚úó Erreur lors du test de {url}: {e}")
    
    # 7. Tester la d√©connexion et la perte d'acc√®s
    print("\n7. Test de d√©connexion...")
    try:
        response = client.get(reverse('student_portal:logout'))
        
        if not client.session.get('student_authenticated'):
            print("   ‚úì D√©connexion r√©ussie")
            
            # V√©rifier que l'acc√®s au dashboard est maintenant bloqu√©
            response = client.get(reverse('student_portal:dashboard'))
            if response.status_code == 302:
                print("   ‚úì Acc√®s au dashboard bloqu√© apr√®s d√©connexion")
            else:
                print(f"   ‚úó Acc√®s au dashboard non bloqu√© apr√®s d√©connexion (code: {response.status_code})")
        else:
            print("   ‚úó √âchec de la d√©connexion")
    except Exception as e:
        print(f"   ‚úó Erreur lors du test de d√©connexion: {e}")
    
    print("\n=== Test de s√©curit√© termin√© ===")
    return True


def test_admin_student_conflict():
    """Test des conflits entre sessions admin et √©tudiant"""
    
    print("\n=== Test de Conflit de Sessions ===\n")
    
    # Cr√©er un utilisateur admin de test
    try:
        BaseUser.objects.filter(username='test_admin').delete()
        admin_user = BaseUser.objects.create_user(
            username='test_admin',
            password='test_password',
            role='scholar'
        )
        print("   ‚úì Utilisateur admin cr√©√©")
    except Exception as e:
        print(f"   ‚úó Erreur lors de la cr√©ation de l'admin: {e}")
        return False
    
    client = Client()
    
    # Connecter l'admin
    try:
        response = client.post(reverse('authentication:login'), {
            'username': 'test_admin',
            'password': 'test_password'
        })
        
        if client.session.get('_auth_user_id'):
            print("   ‚úì Admin connect√©")
        else:
            print("   ‚úó √âchec de la connexion admin")
            return False
    except Exception as e:
        print(f"   ‚úó Erreur lors de la connexion admin: {e}")
        return False
    
    # Essayer d'acc√©der au portail √©tudiant en tant qu'admin
    try:
        response = client.get(reverse('student_portal:login'))
        print(f"   ‚úì Acc√®s au portail √©tudiant en tant qu'admin (code: {response.status_code})")
        
        # L'admin devrait pouvoir voir la page mais avec un avertissement
        if response.status_code == 200:
            print("   ‚úì Admin peut acc√©der au portail (pour tests)")
    except Exception as e:
        print(f"   ‚úó Erreur lors de l'acc√®s au portail: {e}")
    
    return True


if __name__ == '__main__':
    print("üîí Test de s√©curit√© du portail √©tudiant\n")
    
    success1 = test_student_portal_security()
    success2 = test_admin_student_conflict()
    
    if success1 and success2:
        print("\nüéâ Tous les tests de s√©curit√© sont pass√©s !")
        sys.exit(0)
    else:
        print("\n‚ùå Des probl√®mes de s√©curit√© ont √©t√© d√©tect√©s.")
        sys.exit(1)
