#!/usr/bin/env python
"""
Script de test pour v√©rifier le syst√®me de contr√¥le d'acc√®s bas√© sur les r√¥les
"""
import os
import sys
import django

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'ysem.settings')
django.setup()

from django.test import Client
from django.contrib.auth import get_user_model
from django.urls import reverse

User = get_user_model()

def test_role_based_access():
    """Test du syst√®me de contr√¥le d'acc√®s bas√© sur les r√¥les"""
    print("=== Test du contr√¥le d'acc√®s bas√© sur les r√¥les ===\n")
    
    try:
        # Cr√©er des utilisateurs de test pour chaque r√¥le
        test_users = {}
        
        roles = [
            ('scholar', 'Responsable Scolarit√©'),
            ('teaching', 'Responsable Enseignements'),
            ('planning', 'Responsable Planification'),
            ('super_admin', 'Super Administrateur'),
            ('student', '√âtudiant')
        ]
        
        print("Cr√©ation des utilisateurs de test :")
        for role, description in roles:
            username = f'test_{role}'
            user, created = User.objects.get_or_create(
                username=username,
                defaults={
                    'email': f'{username}@test.com',
                    'first_name': 'Test',
                    'last_name': description,
                    'role': role
                }
            )
            if created:
                user.set_password('testpass123')
                user.save()
            test_users[role] = user
            print(f"   ‚úÖ {description} ({username}) - R√¥le: {role}")
        
        print("\n" + "="*60)
        
        # URLs √† tester par r√¥le
        test_urls = {
            'scholar_urls': [
                ('/scholar/', 'Dashboard Scolarit√©'),
                ('/scholar/etudiants/', 'Gestion √âtudiants'),
                ('/prospection/', 'Module Prospection'),
            ],
            'teaching_urls': [
                ('/teach/', 'Dashboard Enseignements'),
                ('/teach/enseignants/', 'Gestion Enseignants'),
                ('/teach/suivi_cours/', 'Suivi des Cours'),
            ],
            'planning_urls': [
                ('/planning/', 'Dashboard Planification'),
                ('/planning/salles/', 'Gestion Salles'),
                ('/planning/emplois-du-temps/', 'Emplois du Temps'),
            ],
            'forbidden_urls': [
                ('/admin/', 'Administration Django'),
            ]
        }
        
        # Test pour chaque utilisateur
        for role, user in test_users.items():
            print(f"\nüß™ Tests pour {user.first_name} {user.last_name} (r√¥le: {role})")
            print("-" * 50)
            
            client = Client()
            client.login(username=user.username, password='testpass123')
            
            # Test des URLs selon le r√¥le
            if role == 'scholar':
                test_user_access(client, user, test_urls['scholar_urls'], should_access=True)
                test_user_access(client, user, test_urls['teaching_urls'], should_access=False)
                test_user_access(client, user, test_urls['planning_urls'], should_access=False)
                
            elif role == 'teaching':
                test_user_access(client, user, test_urls['teaching_urls'], should_access=True)
                test_user_access(client, user, test_urls['scholar_urls'], should_access=False)
                test_user_access(client, user, test_urls['planning_urls'], should_access=False)
                
            elif role == 'planning':
                test_user_access(client, user, test_urls['planning_urls'], should_access=True)
                test_user_access(client, user, test_urls['scholar_urls'], should_access=False)
                test_user_access(client, user, test_urls['teaching_urls'], should_access=False)
                
            elif role == 'super_admin':
                # Super admin devrait avoir acc√®s √† tout
                test_user_access(client, user, test_urls['scholar_urls'], should_access=True)
                test_user_access(client, user, test_urls['teaching_urls'], should_access=True)
                test_user_access(client, user, test_urls['planning_urls'], should_access=True)
                
            elif role == 'student':
                # √âtudiant ne devrait avoir acc√®s √† aucun dashboard admin
                test_user_access(client, user, test_urls['scholar_urls'], should_access=False)
                test_user_access(client, user, test_urls['teaching_urls'], should_access=False)
                test_user_access(client, user, test_urls['planning_urls'], should_access=False)
            
            client.logout()
        
        print("\n" + "="*60)
        print("üß™ Test de redirection automatique depuis la racine")
        print("-" * 50)
        
        # Test de redirection automatique depuis la racine
        for role, user in test_users.items():
            if role != 'student':  # Skip student pour ce test
                client = Client()
                client.login(username=user.username, password='testpass123')
                
                response = client.get('/', follow=False)
                if response.status_code == 302:
                    print(f"   ‚úÖ {user.first_name} {user.last_name} ({role}): Redirection automatique")
                else:
                    print(f"   ‚ùå {user.first_name} {user.last_name} ({role}): Pas de redirection")
                
                client.logout()
        
        print(f"\n=== Tests termin√©s ===")
        print("‚úÖ Syst√®me de contr√¥le d'acc√®s bas√© sur les r√¥les test√© avec succ√®s !")
        
    except Exception as e:
        print(f"‚ùå Erreur lors des tests: {e}")
        import traceback
        traceback.print_exc()

def test_user_access(client, user, urls, should_access=True):
    """Test l'acc√®s d'un utilisateur √† une liste d'URLs"""
    for url, description in urls:
        try:
            response = client.get(url, follow=False)
            
            if should_access:
                # L'utilisateur devrait avoir acc√®s
                if response.status_code in [200, 302]:
                    if response.status_code == 302:
                        # V√©rifier que ce n'est pas une redirection de s√©curit√©
                        location = response.get('Location', '')
                        if any(forbidden in location for forbidden in ['/auth/login', '/main/', '/teach/', '/planning/']):
                            print(f"   ‚ùå {description}: Acc√®s refus√© (redirection s√©curit√©)")
                        else:
                            print(f"   ‚úÖ {description}: Acc√®s autoris√© (redirection)")
                    else:
                        print(f"   ‚úÖ {description}: Acc√®s autoris√©")
                else:
                    print(f"   ‚ùå {description}: Acc√®s refus√© (status: {response.status_code})")
            else:
                # L'utilisateur ne devrait PAS avoir acc√®s
                if response.status_code == 302:
                    # V√©rifier que c'est bien une redirection de s√©curit√©
                    location = response.get('Location', '')
                    if any(redirect in location for redirect in ['/auth/login', '/main/', '/teach/', '/planning/']):
                        print(f"   ‚úÖ {description}: Acc√®s correctement refus√©")
                    else:
                        print(f"   ‚ö†Ô∏è  {description}: Redirection inattendue vers {location}")
                elif response.status_code == 403:
                    print(f"   ‚úÖ {description}: Acc√®s correctement refus√© (403)")
                elif response.status_code == 200:
                    print(f"   ‚ùå {description}: Acc√®s autoris√© alors qu'il devrait √™tre refus√©")
                else:
                    print(f"   ‚ö†Ô∏è  {description}: Status inattendu: {response.status_code}")
                    
        except Exception as e:
            print(f"   ‚ùå {description}: Erreur - {e}")

if __name__ == "__main__":
    test_role_based_access()
