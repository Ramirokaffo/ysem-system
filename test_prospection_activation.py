#!/usr/bin/env python
"""
Script de test pour le syst√®me d'activation/d√©sactivation de la prospection
"""

import os
import sys
import django

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'ysem.settings')
django.setup()

from django.test import Client
from django.urls import reverse
from prospection.models import ProspectionConfig
from prospection.context_processors import prospection_context


def test_prospection_config_model():
    """Test du mod√®le ProspectionConfig"""
    print("üß™ Test du mod√®le ProspectionConfig...")
    
    # Test de cr√©ation de configuration
    config = ProspectionConfig.get_or_create_config()
    print(f"‚úÖ Configuration cr√©√©e: {config}")
    
    # Test de l'√©tat initial
    print(f"‚úÖ √âtat initial: {'Activ√©e' if config.is_active else 'D√©sactiv√©e'}")
    
    # Test de la m√©thode utilitaire
    is_active = ProspectionConfig.is_prospection_active()
    print(f"‚úÖ M√©thode utilitaire: {is_active}")
    
    # Test de modification
    original_state = config.is_active
    config.is_active = not original_state
    config.modified_by = "test_script"
    config.save()
    
    # V√©rifier que la modification a √©t√© sauvegard√©e
    config_updated = ProspectionConfig.get_or_create_config()
    print(f"‚úÖ √âtat apr√®s modification: {'Activ√©e' if config_updated.is_active else 'D√©sactiv√©e'}")
    
    # Restaurer l'√©tat original
    config_updated.is_active = original_state
    config_updated.save()
    
    return True


def test_context_processor():
    """Test du context processor"""
    print("\nüîß Test du context processor...")
    
    from django.test import RequestFactory
    
    factory = RequestFactory()
    request = factory.get('/')
    
    # Test du context processor
    context = prospection_context(request)
    
    print(f"‚úÖ Context prospection_active: {context['prospection_active']}")
    print(f"‚úÖ Context prospection_config: {context['prospection_config']}")
    
    # V√©rifier que les cl√©s existent
    assert 'prospection_active' in context
    assert 'prospection_config' in context
    
    return True


def test_toggle_functionality():
    """Test de la fonctionnalit√© d'activation/d√©sactivation"""
    print("\nüîÑ Test de la fonctionnalit√© toggle...")
    
    client = Client()
    
    # √âtat initial
    config = ProspectionConfig.get_or_create_config()
    initial_state = config.is_active
    print(f"‚úÖ √âtat initial: {'Activ√©e' if initial_state else 'D√©sactiv√©e'}")
    
    # Test de l'URL toggle (sans authentification - devrait rediriger)
    response = client.post(reverse('main:toggle_prospection'))
    print(f"‚úÖ R√©ponse toggle sans auth: {response.status_code} (302 attendu)")
    
    # V√©rifier que l'√©tat n'a pas chang√© (pas d'authentification)
    config.refresh_from_db()
    print(f"‚úÖ √âtat apr√®s tentative non-auth: {'Activ√©e' if config.is_active else 'D√©sactiv√©e'}")
    
    return True


def test_admin_integration():
    """Test de l'int√©gration admin"""
    print("\nüîß Test de l'int√©gration admin...")
    
    from django.contrib import admin
    from prospection.admin import ProspectionConfigAdmin
    
    # V√©rifier que le mod√®le est enregistr√©
    if ProspectionConfig in admin.site._registry:
        print("‚úÖ ProspectionConfig enregistr√© dans l'admin")
        
        # V√©rifier la configuration de l'admin
        config_admin = admin.site._registry[ProspectionConfig]
        print(f"‚úÖ Champs de liste: {config_admin.list_display}")
        print(f"‚úÖ Champs modifiables: {config_admin.fields}")
        
        return True
    else:
        print("‚ùå ProspectionConfig NON enregistr√© dans l'admin")
        return False


def test_template_integration():
    """Test de l'int√©gration dans les templates"""
    print("\nüé® Test de l'int√©gration dans les templates...")
    
    from django.template.loader import get_template
    from django.template import Context
    
    # Test du template des param√®tres
    try:
        template = get_template('main/parametres.html')
        print("‚úÖ Template parametres.html: OK")
    except Exception as e:
        print(f"‚ùå Template parametres.html: ERREUR - {e}")
    
    # Test du template de base
    try:
        template = get_template('main/base.html')
        print("‚úÖ Template base.html: OK")
    except Exception as e:
        print(f"‚ùå Template base.html: ERREUR - {e}")
    
    # Test du template dashboard
    try:
        template = get_template('main/dashboard.html')
        print("‚úÖ Template dashboard.html: OK")
    except Exception as e:
        print(f"‚ùå Template dashboard.html: ERREUR - {e}")
    
    return True


def test_urls():
    """Test des URLs"""
    print("\nüåê Test des URLs...")
    
    client = Client()
    
    urls_to_test = [
        ('main:parametres', 'Page des param√®tres'),
        ('main:toggle_prospection', 'Toggle prospection'),
    ]
    
    for url_name, description in urls_to_test:
        try:
            url = reverse(url_name)
            response = client.get(url) if 'toggle' not in url_name else client.post(url)
            print(f"‚úÖ {description}: {response.status_code}")
        except Exception as e:
            print(f"‚ùå {description}: ERREUR - {e}")
    
    return True


def main():
    """Fonction principale de test"""
    print("üöÄ Test du syst√®me d'activation/d√©sactivation de la prospection")
    print("=" * 70)
    
    try:
        # Tests du mod√®le
        test_prospection_config_model()
        
        # Tests du context processor
        test_context_processor()
        
        # Tests de la fonctionnalit√© toggle
        test_toggle_functionality()
        
        # Tests de l'admin
        test_admin_integration()
        
        # Tests des templates
        test_template_integration()
        
        # Tests des URLs
        test_urls()
        
        print("\n" + "=" * 70)
        print("‚úÖ Tous les tests sont pass√©s avec succ√®s!")
        
        print("\nüìã Fonctionnalit√©s impl√©ment√©es:")
        print("   üîπ Mod√®le ProspectionConfig pour g√©rer l'activation")
        print("   üîπ Context processor pour rendre l'√©tat disponible partout")
        print("   üîπ Interface d'activation/d√©sactivation dans les param√®tres")
        print("   üîπ Menu conditionnel dans la sidebar principale")
        print("   üîπ Masquage des √©l√©ments de prospection quand d√©sactiv√©e")
        print("   üîπ Administration Django int√©gr√©e")
        
        print("\nüéØ Utilisation:")
        print("   1. Aller dans Param√®tres > Prospection")
        print("   2. Cliquer sur 'Activer' pour activer la prospection")
        print("   3. Le menu 'Prospection' appara√Æt dans la sidebar")
        print("   4. Les statistiques de prospection s'affichent sur le dashboard")
        print("   5. Cliquer sur 'D√©sactiver' pour masquer tout ce qui concerne la prospection")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå Erreur lors des tests: {e}")
        import traceback
        traceback.print_exc()
        return False


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
